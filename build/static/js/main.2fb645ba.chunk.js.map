{"version":3,"sources":["components/DrawClock.js","components/Hands.js","App.js","serviceWorker.js","index.js"],"names":["Tick","props","style","transform","index","className","ticks","push","key","Hand","angle","moment","time","format","split","hour","min","sec","secAngle","minAngle","hourAngle","Clock","state","setInterval","setState","DrawClock","Hands","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAEMA,G,MAAO,SAACC,GACZ,IAAMC,EAAQ,CAAEC,UAAU,UAAD,OAA0B,EAAdF,EAAMG,MAAlB,SACzB,OAAO,yBAAKC,UAAU,OAAOH,MAAOA,MAGvB,aAGb,IAFA,IAAMI,EAAQ,GAELF,EAAQ,EAAGA,GAAS,GAAIA,IAC/BE,EAAMC,KAAK,kBAAC,EAAD,CAAMC,IAAKJ,EAAOA,MAAOA,KAGtC,OAAO,yBAAKC,UAAU,UAAUC,I,OCX5BG,EAAO,SAAC,GAAD,IAAGJ,EAAH,EAAGA,UAAWK,EAAd,EAAcA,MAAd,OACX,yBAAKL,UAAWA,EAAWH,MAAO,CAAEC,UAAU,UAAD,OAAYO,EAAZ,YAGhC,WAACT,GACd,IADwB,EACXU,IAAOV,EAAMW,MAAMC,OAAO,YACTC,MAAM,KAFZ,mBAEjBC,EAFiB,KAEXC,EAFW,KAENC,EAFM,KAGlBC,EAAiB,EAAND,EACXE,EAAiB,EAANH,EAAUC,EAAM,GAC3BG,EAAmB,GAAPL,EAAYC,EAAM,EAAIC,EAAM,IAE9C,OACE,yBAAKZ,UAAU,SACb,kBAAC,EAAD,CAAMA,UAAU,MAAMK,MAAOQ,IAC7B,kBAAC,EAAD,CAAMb,UAAU,MAAMK,MAAOS,IAC7B,kBAAC,EAAD,CAAMd,UAAU,OAAOK,MAAOU,MCYrBC,E,kDArBb,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IACDqB,MAAQ,CAAEV,KAAMD,OAFJ,E,gEAKE,IAAD,OAClBY,aAAY,kBAAM,EAAKC,UAAS,iBAAO,CAAEZ,KAAMD,YAAc,O,+BAI7D,OACE,yBAAKN,UAAU,SACb,4CACA,kBAACoB,EAAD,MACA,kBAACC,EAAD,CAAOd,KAAMe,KAAKL,MAAMV,OACxB,yBAAKP,UAAU,gB,GAhBHuB,IAAMC,WCINC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2fb645ba.chunk.js","sourcesContent":["import React from 'react';\n\nconst Tick = (props) => {\n  const style = { transform: `rotate(${props.index * 6}deg)` };\n  return <div className=\"tick\" style={style}></div>;\n};\n\nexport default () => {\n  const ticks = [];\n\n  for (let index = 1; index <= 60; index++) {\n    ticks.push(<Tick key={index} index={index} />);\n  }\n\n  return <div className=\"circle\">{ticks}</div>;\n};\n","import React from 'react';\nimport moment from 'moment';\n\nconst Hand = ({ className, angle }) => (\n  <div className={className} style={{ transform: `rotate(${angle}deg)` }}></div>\n);\n\nexport default (props) => {\n  const time = moment(props.time).format('hh:mm:ss');\n  const [hour, min, sec] = time.split(':');\n  const secAngle = sec * 6;\n  const minAngle = min * 6 + sec / 10;\n  const hourAngle = hour * 30 + min / 2 + sec / 120;\n\n  return (\n    <div className=\"hands\">\n      <Hand className=\"sec\" angle={secAngle} />\n      <Hand className=\"min\" angle={minAngle} />\n      <Hand className=\"hour\" angle={hourAngle} />\n    </div>\n  );\n};\n","import React from 'react';\nimport moment from 'moment';\n\nimport './App.css';\n\nimport DrawClock from './components/DrawClock';\nimport Hands from './components/Hands.js';\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { time: moment() };\n  }\n\n  componentDidMount() {\n    setInterval(() => this.setState(() => ({ time: moment() })), 1000);\n  }\n\n  render() {\n    return (\n      <div className=\"clock\">\n        <h1>Analog Clock</h1>\n        <DrawClock />\n        <Hands time={this.state.time} />\n        <div className=\"center\"></div>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Clock from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Clock />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}